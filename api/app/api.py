from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from .models import ContentRequest, TaskResponse, ContentResponse
from .database import get_db
from . import crud
from agents.tasks import create_social_media_content, post_to_social_media

router = APIRouter()

@router.post("/content/generate", response_model=TaskResponse, status_code=202)
async def generate_content(request: ContentRequest):
    """
    Starts a background task to generate social media content.
    """
    task = create_social_media_content.delay(
        request.client_id, request.topic, request.platform
    )
    return {"message": "Content creation task accepted", "task_id": task.id}


@router.get("/content/results/{task_id}", response_model=ContentResponse)
def get_task_result(task_id: str, db: Session = Depends(get_db)):
    """
    Retrieves the stored content generated by a specific task from the database.
    """
    db_content = crud.get_content_by_task_id(db, task_id=task_id)
    if db_content is None:
        raise HTTPException(status_code=404, detail="Content not found or task is still processing")
    return db_content


@router.get("/content/drafts", response_model=List[ContentResponse])
def get_drafts(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    """
    Lists all content currently in 'draft' status.
    """
    drafts = crud.get_draft_content(db, skip=skip, limit=limit)
    return drafts


@router.post("/content/approve/{content_id}", response_model=ContentResponse)
def approve_draft(content_id: int, db: Session = Depends(get_db)):
    """
    Approves a piece of content and triggers the posting task.
    """
    # First, update the content's status to 'approved' in the DB
    approved_content = crud.update_content_status(db, content_id=content_id, new_status="approved")
    
    if approved_content is None:
        raise HTTPException(status_code=404, detail="Content not found")

    # Now, trigger the background task to post the approved content
    post_to_social_media.delay(content_id=approved_content.id)
    
    return approved_content